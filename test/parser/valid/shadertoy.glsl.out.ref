uniform float iGlobalTime;
uniform vec2 iResolution;
uniform vec2 iMouse;
const float texscl = 2.500000;
mat2 mm2(in float a) {
    float c = cos(a), s = sin(a);
    return mat2(c, - s, s, c);
}
float hash(vec2 x) {
    return fract(cos(dot(x.xy, vec2(2.310000, 53.209999)) * 124.123001) * 412.000000);
}
float sdfsw = 0.000000;
float length4(in vec3 p) {
    p = p * p;
    p = p * p;
    return pow(p.x + p.y + p.z, 1.000000 / 4.000000);
}
float map(vec3 p) {
    float d = mix(length(p) - 1.100000, length4(p) - 1.000000, sdfsw - 0.300000);
    d = min(d, - length4(p) - 4.000000);
    return d * 0.500000;
}
float march(in vec3 ro, in vec3 rd) {
    float precis = 0.001000;
    float h = precis * 2.000000;
    float d = 0.000000;
    for (int i = 0; i < 70; i++) {
        if (abs(h) < precis || d > 15.000000) break;
        d += h;
        float res = map(ro + rd * d);
        h = res;
    }
    return d;
}
vec3 normal(in vec3 p) {
    vec2 e = vec2(- 1.000000, 1.000000) * 0.005000;
    return normalize(e.yxx * map(p + e.yxx) + e.xxy * map(p + e.xxy) + e.xyx * map(p + e.xyx) + e.yyy * map(p + e.yyy));
}
float cells(in vec3 p) {
    p = fract(p / 2.000000) * 2.000000;
    p = min(p, 2.000000 - p);
    return 1.000000 - min(length(p), length(p - 1.000000));
}
vec4 heartMapping(in vec2 p) {
    p.y -= 0.250000;
    vec3 bcol = vec3(0, 0, 0);
    float tt = mod(iGlobalTime, 1.500000) / 1.500000;
    float ss = pow(tt, 0.000000) * 0.500000 + 0.500000;
    ss = 1.000000 + ss * 0.500000 * sin(tt * 6.283100 * 3.000000 + p.y * 0.500000) * exp(- tt * 4.000000);
    p *= vec2(0.500000, 1.500000) + ss * vec2(0.500000, - 0.500000);
    float a = atan(p.x, p.y) / 3.141593;
    float r = length(p);
    float h = abs(a);
    float d = (13.000000 * h - 22.000000 * h * h + 10.000000 * h * h * h) / (6.000000 - 5.000000 * h);
    float s = d;
    s = 0.500000;
    s *= 1.000000;
    s = 0.500000 + 0.600000 * s;
    s *= 0.500000 + 0.500000 * pow(1.000000 - clamp(r / d, 0.000000, 1.000000), 0.100000);
    vec3 hcol = vec3(1.000000, 0.000000, 0.300000) * s;
    vec3 col = mix(bcol, hcol, smoothstep(- 0.010000, 0.010000, d - r));
    col.x *= ss;
    col.y = ss;
    return vec4(col, 1.000000);
}
float tex(vec3 p) {
    p *= texscl;
    float rz = 0.000000;
    float z = 1.000000;
    float heartScaleFactor = 1.100000;
    vec4 heart0 = heartMapping(p.xy * heartScaleFactor);
    vec4 heart1 = heartMapping(p.zy * heartScaleFactor);
    vec4 heart2 = heartMapping(p.xz * heartScaleFactor);
    heart0 = max(heart0, heart1);
    heart0 = max(heart0, heart2);
    float heartMask = heart0.x + heart1.x + heart2.x * 0.333000;
    heartMask = clamp(heartMask, 0.000000, 1.000000);
    for (int i = 0; i < 2; i++) {
        rz += cells(p) / z;
        p *= 2.500000 * 0.150000;
        z *= - 1.100000 * 0.150000;
    }
    return clamp(heartMask + rz * rz * 4.950000, 0.000000, 1.000000) * 2.730000 - 1.000000 - heartMask;
}
vec3 prlpos(in vec3 p, in vec3 n, in vec3 rd) {
    vec3 tgt = n * dot(rd, n) - rd;
    tgt /= abs(dot(tgt, rd)) + 4.000000;
    p += tgt * tex(p) * 0.000000;
    return p;
}
float btex(in vec3 p) {
    float rz = tex(p);
    rz += tex(p * 20.000000) * 0.010000;
    return rz;
}
vec3 bump(in vec3 p, in vec3 n, in float ds) {
    vec2 e = vec2(0.004000 * sqrt(ds) * 0.500000, 0);
    float n0 = btex(p);
    vec3 d = vec3(btex(p + e.xyy) - n0, btex(p + e.yxy) - n0, btex(p + e.yyx) - n0) / e.x;
    vec3 tgd = d - n * dot(n, d);
    n = normalize(n - tgd * 0.100000 * 2.000000 / ds);
    return n;
}
void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 bp = fragCoord.xy / iResolution.xy * 2.000000 - 1.000000;
    vec2 p = bp;
    p.x *= iResolution.x / iResolution.y;
    vec2 mo = iMouse.xy / iResolution.xy - 0.000000;
    mo = mo == vec2(- 0.000000) ? mo = vec2(0.400000, - 0.250000) : mo;
    mo.x *= iResolution.x / iResolution.y;
    mo.y = 0.425000;
    mo.y += 0.500000 * abs(sin(iGlobalTime)) - 0.150000;
    p.x += mo.x * 1.000000;
    sdfsw = mo.y * 4.000000;
    vec3 ro = vec3(0.000000, 0.000000, 4.000000);
    vec3 rd = normalize(vec3(p, - 3.000000 + sin(iGlobalTime * 0.900000 + sin(iGlobalTime))));
    mat2 mx = mm2(iGlobalTime * 0.000000 + sin(iGlobalTime * 0.400000) - 0.200000);
    mat2 my = mm2(iGlobalTime * 0.070000 + cos(iGlobalTime * 0.330000) - 0.100000);
    ro.xz *= mx;
    rd.xz *= mx;
    ro.xy *= my;
    rd.xy *= my;
    float rz = march(ro, rd);
    vec3 col = vec3(0);
    if (rz < 15.000000) {
        vec3 pos = ro + rz * rd;
        vec3 nor = normal(pos);
        pos = prlpos(pos, nor, rd);
        float d = distance(ro, pos);
        nor = bump(pos, nor, d);
        vec3 ligt = normalize(vec3(- 0.000000, 0.500000, - 0.300000));
        float dif = clamp(dot(nor, ligt), 0.000000, 1.000000);
        float bac = clamp(dot(nor, normalize(vec3(- ligt))), 0.000000, 1.000000);
        float spe = pow(clamp(dot(reflect(rd, nor), ligt), 0.000000, 1.000000), 10.000000);
        float fre = pow(clamp(1.000000 + dot(nor, rd), 0.000000, 1.000000), 2.000000);
        vec3 brdf = vec3(0.300000);
        brdf += bac * vec3(0.300000);
        brdf += dif * 0.500000;
        float tx = tex(pos);
        col = sin(vec3(1.500000 + mo.x * 0.400000, 2.200000 + mo.x * 0.250000, 2.700000) + tx * 1.200000 + 4.200000) * 0.600000 + 0.550000;
        col = col * brdf + spe * 0.000000 / sqrt(rz) + 0.500000 * fre;
        col = mix(col, vec3(0.000000), clamp(exp(rz * 0.430000 - 4.000000), 0.000000, 1.000000));
    }
    col.x *= col.z;
    col.xyz = col.zxy;
    col = clamp(col * 1.050000, 0.000000, 1.000000);
    col *= pow(smoothstep(0.000000, 0.000000, (bp.x + 1.000000) * (bp.y + 1.000000) * (bp.x - 1.000000) * (bp.y - 1.000000)), 0.000000);
    col *= smoothstep(3.900000, 0.000000, sin(p.y * 0.000000 * iResolution.y + iGlobalTime * 10.000000)) + 0.100000;
    col -= hash(col.xy + p.xy) * 0.250000;
    fragColor = vec4(col, 1.000000);
}
